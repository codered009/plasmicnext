// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jwv3sFTRCEhWt4X1hDRzar
// Component: DbBotTTUde
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: oRqdtwF4cyb/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: jwv3sFTRCEhWt4X1hDRzar/projectcss
import * as sty from "./PlasmicSaleButton.module.css"; // plasmic-import: DbBotTTUde/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: vfAmjKpczl4/icon

export type PlasmicSaleButton__VariantMembers = {};

export type PlasmicSaleButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicSaleButton__VariantsArgs;
export const PlasmicSaleButton__VariantProps = new Array<VariantPropType>();

export type PlasmicSaleButton__ArgsType = {};
type ArgPropType = keyof PlasmicSaleButton__ArgsType;
export const PlasmicSaleButton__ArgProps = new Array<ArgPropType>();

export type PlasmicSaleButton__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultSaleButtonProps {
  className?: string;
}

function PlasmicSaleButton__RenderFunc(props: {
  variants: PlasmicSaleButton__VariantsArgs;
  args: PlasmicSaleButton__ArgsType;
  overrides: PlasmicSaleButton__OverridesType;
  dataFetches?: PlasmicSaleButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    active_root: isRootActive,
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      data-plasmic-trigger-props={[
        triggerRootActiveProps,
        triggerRootHoverProps
      ]}
    >
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        color={
          triggers.active_root
            ? ("orange" as const)
            : triggers.hover_root
            ? ("yellow" as const)
            : undefined
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSaleButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSaleButton__VariantsArgs;
    args?: PlasmicSaleButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSaleButton__Fetches;
  } & Omit<PlasmicSaleButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSaleButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSaleButton__ArgProps,
      internalVariantPropNames: PlasmicSaleButton__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSaleButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSaleButton";
  } else {
    func.displayName = `PlasmicSaleButton.${nodeName}`;
  }
  return func;
}

export const PlasmicSaleButton = Object.assign(
  // Top-level PlasmicSaleButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSaleButton
    internalVariantProps: PlasmicSaleButton__VariantProps,
    internalArgProps: PlasmicSaleButton__ArgProps
  }
);

export default PlasmicSaleButton;
/* prettier-ignore-end */
